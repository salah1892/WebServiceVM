// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebServiceVM.Infrastructure.Persistence;

#nullable disable

namespace WebServiceVM.Infrastructure.Migrations
{
    [DbContext(typeof(VMDbContext))]
    [Migration("20230526094526_SecondOne")]
    partial class SecondOne
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ParkingTariffAbonnement", b =>
                {
                    b.Property<Guid>("ListParkingsIdParking")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ListTariffAbonnementIdTariffAbonnement")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ListParkingsIdParking", "ListTariffAbonnementIdTariffAbonnement");

                    b.HasIndex("ListTariffAbonnementIdTariffAbonnement");

                    b.ToTable("ParkingTariffAbonnement");
                });

            modelBuilder.Entity("WebServiceVM.Core.Entity.Abonnee", b =>
                {
                    b.Property<Guid>("IdAbonnee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumCarte")
                        .HasColumnType("int");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAbonnee");

                    b.ToTable("Abonnee");
                });

            modelBuilder.Entity("WebServiceVM.Core.Entity.Abonnement", b =>
                {
                    b.Property<Guid>("IdAbonnement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AbonneeIdAbonnee")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateActivation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDesActivation")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TariffAbonnementIdTariffAbonnement")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdAbonnement");

                    b.HasIndex("AbonneeIdAbonnee");

                    b.HasIndex("TariffAbonnementIdTariffAbonnement");

                    b.ToTable("Abonnement");
                });

            modelBuilder.Entity("WebServiceVM.Core.Entity.Parking", b =>
                {
                    b.Property<Guid>("IdParking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdressParking")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomParking")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeParking")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdParking");

                    b.ToTable("Parking");
                });

            modelBuilder.Entity("WebServiceVM.Core.Entity.Payement", b =>
                {
                    b.Property<Guid>("IdPayement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AbonnementIdAbonnement")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DatePayement")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TicketIdTicket")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdPayement");

                    b.HasIndex("AbonnementIdAbonnement");

                    b.HasIndex("TicketIdTicket");

                    b.ToTable("Payement");
                });

            modelBuilder.Entity("WebServiceVM.Core.Entity.TariffAbonnement", b =>
                {
                    b.Property<Guid>("IdTariffAbonnement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeAbonnement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTariffAbonnement");

                    b.ToTable("TariffAbonnement");
                });

            modelBuilder.Entity("WebServiceVM.Core.Entity.TariffTicket", b =>
                {
                    b.Property<Guid>("IdTariffTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateEntree")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSortie")
                        .HasColumnType("datetime2");

                    b.HasKey("IdTariffTicket");

                    b.ToTable("TariffTicket");
                });

            modelBuilder.Entity("WebServiceVM.Core.Entity.Ticket", b =>
                {
                    b.Property<Guid>("IdTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateEntree")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSortie")
                        .HasColumnType("datetime2");

                    b.Property<float>("PrixTicket")
                        .HasColumnType("real");

                    b.Property<bool>("Statut")
                        .HasColumnType("bit");

                    b.Property<Guid>("TariffTicketIdTariffTicket")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdTicket");

                    b.HasIndex("TariffTicketIdTariffTicket");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("WebServiceVM.Core.Entity.WebClient", b =>
                {
                    b.Property<Guid>("IdWebClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mobile")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdWebClient");

                    b.ToTable("WebClient");
                });

            modelBuilder.Entity("ParkingTariffAbonnement", b =>
                {
                    b.HasOne("WebServiceVM.Core.Entity.Parking", null)
                        .WithMany()
                        .HasForeignKey("ListParkingsIdParking")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServiceVM.Core.Entity.TariffAbonnement", null)
                        .WithMany()
                        .HasForeignKey("ListTariffAbonnementIdTariffAbonnement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebServiceVM.Core.Entity.Abonnement", b =>
                {
                    b.HasOne("WebServiceVM.Core.Entity.Abonnee", "Abonnee")
                        .WithMany("Abonnement")
                        .HasForeignKey("AbonneeIdAbonnee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServiceVM.Core.Entity.TariffAbonnement", "TariffAbonnement")
                        .WithMany("ListAbonnements")
                        .HasForeignKey("TariffAbonnementIdTariffAbonnement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Abonnee");

                    b.Navigation("TariffAbonnement");
                });

            modelBuilder.Entity("WebServiceVM.Core.Entity.Payement", b =>
                {
                    b.HasOne("WebServiceVM.Core.Entity.Abonnement", "Abonnement")
                        .WithMany("Payement")
                        .HasForeignKey("AbonnementIdAbonnement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServiceVM.Core.Entity.Ticket", "Ticket")
                        .WithMany("Payement")
                        .HasForeignKey("TicketIdTicket")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Abonnement");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("WebServiceVM.Core.Entity.Ticket", b =>
                {
                    b.HasOne("WebServiceVM.Core.Entity.TariffTicket", "TariffTicket")
                        .WithMany("ListTicket")
                        .HasForeignKey("TariffTicketIdTariffTicket")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TariffTicket");
                });

            modelBuilder.Entity("WebServiceVM.Core.Entity.Abonnee", b =>
                {
                    b.Navigation("Abonnement");
                });

            modelBuilder.Entity("WebServiceVM.Core.Entity.Abonnement", b =>
                {
                    b.Navigation("Payement");
                });

            modelBuilder.Entity("WebServiceVM.Core.Entity.TariffAbonnement", b =>
                {
                    b.Navigation("ListAbonnements");
                });

            modelBuilder.Entity("WebServiceVM.Core.Entity.TariffTicket", b =>
                {
                    b.Navigation("ListTicket");
                });

            modelBuilder.Entity("WebServiceVM.Core.Entity.Ticket", b =>
                {
                    b.Navigation("Payement");
                });
#pragma warning restore 612, 618
        }
    }
}
